{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the U.S. Cellular \"How To\" documentation site!!!\n\n\nThis site serves as a catalog of \"How To\" pages on many different topics. To look at the list of topics just click on the \nCatalog of How Tos\n drop down located at the top of the page to get started.\n\n\nPreparation instructions for Engineers\n participating in the Analytics and Automation Summit #3",
            "title": "Introduction"
        },
        {
            "location": "/#welcome-to-the-us-cellular-how-to-documentation-site",
            "text": "This site serves as a catalog of \"How To\" pages on many different topics. To look at the list of topics just click on the  Catalog of How Tos  drop down located at the top of the page to get started.  Preparation instructions for Engineers  participating in the Analytics and Automation Summit #3",
            "title": "Welcome to the U.S. Cellular \"How To\" documentation site!!!"
        },
        {
            "location": "/uscc-organization/",
            "text": "USCC Engineering Github Organization\n\n\nUnder our GitHub Enterprise account we have a U.S. Cellular Engineering organization. This organization serves many purposes, but most importantly the ability to house all of our Automations being developed for the business in an environment that gives us permission control. \n\n\nMinimally this allows us to bring in outside consultants and give them access to our GitHub Enterprise account for any development they do without giving them full access to any repositories that could contain sensitive information or code. To facilitate this we need to require from everyone to \ncreate work related repositories under our organization\n. \n\n\nBelow are instructions on to request access as well as some useful links to documentation within Github about Organizations.\n\n\n\n\nEmail Andrew Spear\n and in the body of the email specify your GitHub username used to log into our GitHub Enterprise Account.\n\n\nOnce you have been added you will be able to access the organizations page.\n\n\nLinks to GitHub help about organizations \n\n\nDifference between user and organization accounts\n\n\nWays you can get to the organizations page.\n\n\nCheckout the Github help doc\n to see how to get to it.\n\n\n\n\nYou can also switch you dashboard feed after you login, which defaults to your user account, to see the dashboard for the organization. This gives you the benefit to see a news feed that you can customize related to the organization just like your user account news feed.\n\n\n\n\n\n\nAfter logging into your account your username on the top left corner will become a drop down once you have been added to the organization. In which you can select the organization to \nSwitch dashboard context\n\n    \n\n\n\n\n\n\nNow you can access the organization main page by clicking the \nView uscc-engineering\n near the top right hand corner.\n    \n\n\n\n\n\n\nNow you should see the U.S. Cellular Engineering main page. Now you can explore the \nRepositories, People, Teams, and more\n that are going on inside the organization. The search bar on the top will search within the organization or you can just scroll down the page on whatever tab your on to explore what people are working on.",
            "title": "USCC Engineering Organization Access"
        },
        {
            "location": "/uscc-organization/#uscc-engineering-github-organization",
            "text": "Under our GitHub Enterprise account we have a U.S. Cellular Engineering organization. This organization serves many purposes, but most importantly the ability to house all of our Automations being developed for the business in an environment that gives us permission control.   Minimally this allows us to bring in outside consultants and give them access to our GitHub Enterprise account for any development they do without giving them full access to any repositories that could contain sensitive information or code. To facilitate this we need to require from everyone to  create work related repositories under our organization .   Below are instructions on to request access as well as some useful links to documentation within Github about Organizations.   Email Andrew Spear  and in the body of the email specify your GitHub username used to log into our GitHub Enterprise Account.  Once you have been added you will be able to access the organizations page.  Links to GitHub help about organizations   Difference between user and organization accounts  Ways you can get to the organizations page.  Checkout the Github help doc  to see how to get to it.   You can also switch you dashboard feed after you login, which defaults to your user account, to see the dashboard for the organization. This gives you the benefit to see a news feed that you can customize related to the organization just like your user account news feed.    After logging into your account your username on the top left corner will become a drop down once you have been added to the organization. In which you can select the organization to  Switch dashboard context \n        Now you can access the organization main page by clicking the  View uscc-engineering  near the top right hand corner.\n        Now you should see the U.S. Cellular Engineering main page. Now you can explore the  Repositories, People, Teams, and more  that are going on inside the organization. The search bar on the top will search within the organization or you can just scroll down the page on whatever tab your on to explore what people are working on.",
            "title": "USCC Engineering Github Organization"
        },
        {
            "location": "/generate-ssh-key/",
            "text": "Generate an SSH key pair\n\n\nThe following instructions walk through how to generate an ssh key pair on a Linux operation system.\n\n\n\n\n\n\nGenerate a ssh key pair\n\n\n\n\n\n\n\n\nChange directory into the .ssh directory, display, and copy to your clipboard the id_rsa.pub, this is the public ssh key needed to put into Github\n\n\ncd .ssh\ncat id_rsa.pub\n\n\nHighlight the entire output from the \ncat\n command which should copy it to your clipboard.\n\n\n\n\n\n\nLogin to Github and access your profile \"Settings\"\n\n\n\n\n\n\n\n\nSelect the SSH and GPG keys settings link\n\n\n\n\n\n\n\n\nClick \"New SSH Key\"\n\n\n\n\n\n\n\n\nAdd a descriptive \"Title\" and paste the ssh key into the \"Key\" input box and click \"Add SSH Key\"",
            "title": "Generate SSH Key pair"
        },
        {
            "location": "/generate-ssh-key/#generate-an-ssh-key-pair",
            "text": "The following instructions walk through how to generate an ssh key pair on a Linux operation system.    Generate a ssh key pair     Change directory into the .ssh directory, display, and copy to your clipboard the id_rsa.pub, this is the public ssh key needed to put into Github  cd .ssh\ncat id_rsa.pub  Highlight the entire output from the  cat  command which should copy it to your clipboard.    Login to Github and access your profile \"Settings\"     Select the SSH and GPG keys settings link     Click \"New SSH Key\"     Add a descriptive \"Title\" and paste the ssh key into the \"Key\" input box and click \"Add SSH Key\"",
            "title": "Generate an SSH key pair"
        },
        {
            "location": "/version_control/daytoday/",
            "text": "Day to Day with Git\n\n\nWhile there are a lot of commands which can seem to make using Git overwhelming, but day to day command usage can be narrowed down to a handful.\n\n\nIf using the Git command line interface (CLI) the command list day to day is about 4 commands.\n\n\n\n\nAdd\n\n\nPull\n\n\nCommit\n\n\nPush",
            "title": "Day to Day Git"
        },
        {
            "location": "/version_control/daytoday/#day-to-day-with-git",
            "text": "While there are a lot of commands which can seem to make using Git overwhelming, but day to day command usage can be narrowed down to a handful.  If using the Git command line interface (CLI) the command list day to day is about 4 commands.   Add  Pull  Commit  Push",
            "title": "Day to Day with Git"
        },
        {
            "location": "/version_control/add_file/",
            "text": "How to Add a file to Git\n\n\nIn order to update git to know about a file a \ngit add\n command is done to add the file to your local repository and stage it for commit.\n\n\nIn IntelliJ this is simplified that when you create a new file IntelliJ will provide you a prompt to decide to add the file to Git. Simply choose \nYes\n or \nNo",
            "title": "Add a File to Git"
        },
        {
            "location": "/version_control/add_file/#how-to-add-a-file-to-git",
            "text": "In order to update git to know about a file a  git add  command is done to add the file to your local repository and stage it for commit.  In IntelliJ this is simplified that when you create a new file IntelliJ will provide you a prompt to decide to add the file to Git. Simply choose  Yes  or  No",
            "title": "How to Add a file to Git"
        },
        {
            "location": "/version_control/create-repo/",
            "text": "How to create and initialize a repository via GitHub\n\n\n\n\n\n\nLogin to GitHub and locate the \nNew Repository\n button on the dashboard page.\n    \n\n\n\n\n\n\nUse the \n \nOwner drop down box\n to specify if the repository should be owned by the user or by the organization.\n\n\n\n\nFill in the information including name, description, and check the Initialize checkbox and click the \nCreate Repository\n button.\n\n\n\n\n\n\n\n\n\n\nNow that you have a repository created see the \nHow To clone a repository",
            "title": "Create a Repository"
        },
        {
            "location": "/version_control/create-repo/#how-to-create-and-initialize-a-repository-via-github",
            "text": "Login to GitHub and locate the  New Repository  button on the dashboard page.\n        Use the    Owner drop down box  to specify if the repository should be owned by the user or by the organization.   Fill in the information including name, description, and check the Initialize checkbox and click the  Create Repository  button.      Now that you have a repository created see the  How To clone a repository",
            "title": "How to create and initialize a repository via GitHub"
        },
        {
            "location": "/version_control/clone-repo/",
            "text": "How to clone a repository locally via IntelliJ\n\n\n\n\n\n\nOur GitHub Enterprise account only allows cloning using the SSH url. So inorder to clone any repository you will need to setup an SSH key pair trust between GitHub and your local machine. You can follow the instructions here to \ngenerate an ssh key pair\n\n\n\n\n\n\nOn the repository main page click the \"Clone or download\" button and be sure to change it to \"Use SSH\" instead of \"Use HTTPS\" and copy the displayed git SSH URL to your clipboar.\n\n\n\n\n\n\n\n\nOpen IntelliJ and select \"Check out from Version Control\" and select \"Git\" from the drop down menu\n\n\n\n\n\n\n\n\nFill out the \"Clone Repository\" popup screen. The SSH URL you copied to your clipboard goes in the Git Repository URL field. Select the directory you wish to have all your repository projects under, or accept the default. Also give the cloned repository a \"Directory Name\" or accept the default. You can click the \"Test\" button to test the connection. When your ready click \"Clone\" and go through any other prompts.\n\n\n\n\n\n\n\n\nNow you have the repository cloned to your local machine in which you can make your changes or start developing your code. When you're ready to commit your changes or newly added code see  the \nHow To on Committing changes",
            "title": "Clone a Repository"
        },
        {
            "location": "/version_control/clone-repo/#how-to-clone-a-repository-locally-via-intellij",
            "text": "Our GitHub Enterprise account only allows cloning using the SSH url. So inorder to clone any repository you will need to setup an SSH key pair trust between GitHub and your local machine. You can follow the instructions here to  generate an ssh key pair    On the repository main page click the \"Clone or download\" button and be sure to change it to \"Use SSH\" instead of \"Use HTTPS\" and copy the displayed git SSH URL to your clipboar.     Open IntelliJ and select \"Check out from Version Control\" and select \"Git\" from the drop down menu     Fill out the \"Clone Repository\" popup screen. The SSH URL you copied to your clipboard goes in the Git Repository URL field. Select the directory you wish to have all your repository projects under, or accept the default. Also give the cloned repository a \"Directory Name\" or accept the default. You can click the \"Test\" button to test the connection. When your ready click \"Clone\" and go through any other prompts.     Now you have the repository cloned to your local machine in which you can make your changes or start developing your code. When you're ready to commit your changes or newly added code see  the  How To on Committing changes",
            "title": "How to clone a repository locally via IntelliJ"
        },
        {
            "location": "/version_control/create-branch/",
            "text": "How to create branches within a repository\n\n\nCreating branches within a repository has many uses from allowing multiple developers to work on different parts of the code at the same time to being a part of a deployment strategy. For more information about the usefulness of branches please see the \nWorkflow Strategy\n page. This page shows the different ways you can create a branch in a repository.\n\n\nVia GitHub\n\n\n\n\n\n\nOn the \nCode\n tab of the repository click the \nBranch: master\n drop down. Here you can see what branches already exist and create new ones. Just simply type the name of the new branch and click \nCreate branch: \nbranch name\n from 'master'\n. To update git locally to know about any newly created remote branches an explicity \nFetch\n needs to be performed.\n\n\n\n\n\n\n\n\nVia IntelliJ IDE\n\n\n\n\n\n\nGo to \nVCS\n -> \nGit\n -> \nBranches..\n\n\n\n\n\n\n\n\nThe \nGit Branches\n pop-up menu will be displayed and click the \n+\nNew Branch\n option.\n\n\n\n\n\n\n\n\nIn the \nCreate New Branch\n dialog name your branch and optionally check the box next to \nCheckout branch\n. (see our How to on \nCheckout Branch\n to learn more about checking out branches)",
            "title": "Create Branches"
        },
        {
            "location": "/version_control/create-branch/#how-to-create-branches-within-a-repository",
            "text": "Creating branches within a repository has many uses from allowing multiple developers to work on different parts of the code at the same time to being a part of a deployment strategy. For more information about the usefulness of branches please see the  Workflow Strategy  page. This page shows the different ways you can create a branch in a repository.",
            "title": "How to create branches within a repository"
        },
        {
            "location": "/version_control/create-branch/#via-github",
            "text": "On the  Code  tab of the repository click the  Branch: master  drop down. Here you can see what branches already exist and create new ones. Just simply type the name of the new branch and click  Create branch:  branch name  from 'master' . To update git locally to know about any newly created remote branches an explicity  Fetch  needs to be performed.",
            "title": "Via GitHub"
        },
        {
            "location": "/version_control/create-branch/#via-intellij-ide",
            "text": "Go to  VCS  ->  Git  ->  Branches..     The  Git Branches  pop-up menu will be displayed and click the  + New Branch  option.     In the  Create New Branch  dialog name your branch and optionally check the box next to  Checkout branch . (see our How to on  Checkout Branch  to learn more about checking out branches)",
            "title": "Via IntelliJ IDE"
        },
        {
            "location": "/version_control/commit/",
            "text": "Committing changes\n\n\nAs you edit files that are being tracked by Git, it sees them as modified. These changes are in your working copy which are considered your working directory, in which when you want to have the changes recorded into what Git refers to as a \"snapshot\" you perform what is referred to as a commit.\n\n\nIn order to do this file changes must be added and then committed. In Git this is done with a \ngit add\n command followed by a \ngit commit\n. In an IDE like IntelliJ, this is done via the following.\n\n\n\n\n\n\nOn the main toolbar under \"VCS\" click \"Commit...\" which brings up the \"Commit Changes\" dialog panel.\n\n\n\n\n\n\n\n\nThe \"Commit Changes\" dialog panel has the following:\n\n\n\n\nRed\n - Displays the files in the working directory that have been modified. Add or remove files that should be apart of the commit by simply checking or unchecking them. Any files that are not being version tracked by git will show up under \"Unversioned Files\", simply add them to be tracked and commit them at the same time by checking them.\n\n\nPurple\n - Specify the commit message to go along with the commit. A commit message is vital to describe why the changes and/or files are being committed. This allows for changes to be recovered, backed, and provides context to the log of changes made to files.\n\n\nPink\n - For a selected file in the Red box area shows the differences between that file and the last committed version of that file, if applicable.\n\n\nOrange\n - Here you can either commit the change which will commit the snapshot to your local read only repository and separately \npush the commmits\n. Or you can \nCommit and Push\n the changes to your remote repository at the same time which directly brings up the \"Push Commits\" dialog window.",
            "title": "Commit Changes"
        },
        {
            "location": "/version_control/commit/#committing-changes",
            "text": "As you edit files that are being tracked by Git, it sees them as modified. These changes are in your working copy which are considered your working directory, in which when you want to have the changes recorded into what Git refers to as a \"snapshot\" you perform what is referred to as a commit.  In order to do this file changes must be added and then committed. In Git this is done with a  git add  command followed by a  git commit . In an IDE like IntelliJ, this is done via the following.    On the main toolbar under \"VCS\" click \"Commit...\" which brings up the \"Commit Changes\" dialog panel.     The \"Commit Changes\" dialog panel has the following:   Red  - Displays the files in the working directory that have been modified. Add or remove files that should be apart of the commit by simply checking or unchecking them. Any files that are not being version tracked by git will show up under \"Unversioned Files\", simply add them to be tracked and commit them at the same time by checking them.  Purple  - Specify the commit message to go along with the commit. A commit message is vital to describe why the changes and/or files are being committed. This allows for changes to be recovered, backed, and provides context to the log of changes made to files.  Pink  - For a selected file in the Red box area shows the differences between that file and the last committed version of that file, if applicable.  Orange  - Here you can either commit the change which will commit the snapshot to your local read only repository and separately  push the commmits . Or you can  Commit and Push  the changes to your remote repository at the same time which directly brings up the \"Push Commits\" dialog window.",
            "title": "Committing changes"
        },
        {
            "location": "/version_control/push/",
            "text": "Push changes to a Remote Repository\n\n\nPushing your commits is to simply take all your committed snapshots and copy them to a repository hosted on a remote server. This has a lot of benefits including the simple fact that the remote server keeps a backup of your repository that can be used to recover or access your files from anywhere.\n\n\nIn an IDE like IntelliJ you can accomplish by doing the following:\n\n\n\n\n\n\nOn the main toolbar open the \"VCS\" menu and expand the \"Git\" and click \"Push\".\n\n\n\n\n\n\n\n\nThis brings up the \"Commit Changes\" dialog panel. By default specifies the remote origin master branch will be the receiver of the pushed commits.",
            "title": "Push Commits"
        },
        {
            "location": "/version_control/push/#push-changes-to-a-remote-repository",
            "text": "Pushing your commits is to simply take all your committed snapshots and copy them to a repository hosted on a remote server. This has a lot of benefits including the simple fact that the remote server keeps a backup of your repository that can be used to recover or access your files from anywhere.  In an IDE like IntelliJ you can accomplish by doing the following:    On the main toolbar open the \"VCS\" menu and expand the \"Git\" and click \"Push\".     This brings up the \"Commit Changes\" dialog panel. By default specifies the remote origin master branch will be the receiver of the pushed commits.",
            "title": "Push changes to a Remote Repository"
        },
        {
            "location": "/version_control/pull/",
            "text": "Pull changes to update local repository\n\n\nTo update your local repository with changes that are in the remote repository you need to perform a \nfetch\n of the changes followed by a \nmerge\n to combine the remote changes with any changes that exist in your working directory. Or you can easily perform a \npull\n which is the combination of the two commands.\n\n\nHow to do a PULL via IntelliJ\n\n\n\n\n\n\nGo to \nVCS\n -> \nGit\n -> \nPull\n.\n\n\n\n\n\n\n\n\nThis brings up the \"Pull Changes\" dialog panel. Verify that the \nGit Root\n directory path is correct and the \nCurrent Branch\n indicates the local branch you want to merge any changes in the remote repository with. Select the \nRemote\n you want to pull from. Check the \nBranches to merge\n and click \nPull",
            "title": "Pull/Fetch"
        },
        {
            "location": "/version_control/pull/#pull-changes-to-update-local-repository",
            "text": "To update your local repository with changes that are in the remote repository you need to perform a  fetch  of the changes followed by a  merge  to combine the remote changes with any changes that exist in your working directory. Or you can easily perform a  pull  which is the combination of the two commands.",
            "title": "Pull changes to update local repository"
        },
        {
            "location": "/version_control/pull/#how-to-do-a-pull-via-intellij",
            "text": "Go to  VCS  ->  Git  ->  Pull .     This brings up the \"Pull Changes\" dialog panel. Verify that the  Git Root  directory path is correct and the  Current Branch  indicates the local branch you want to merge any changes in the remote repository with. Select the  Remote  you want to pull from. Check the  Branches to merge  and click  Pull",
            "title": "How to do a PULL via IntelliJ"
        },
        {
            "location": "/version_control/fetch_branches/",
            "text": "Fetch\n\n\nHow to fetch down branches created remotely\n\n\nIn order to update git to know about any \nremotely created branches via Github\n a \nfetch\n is performed.\n\n\n\n\n\n\nTo perform a fetch via IntelliJ, go to \nVCS\n -> \nGit\n -> \nFetch\n\n\n\n\n\n\n\n\nAfter you have fetched the new branches you can locally checkout the branch to work within that branch",
            "title": "Fetch a Remote created Branch"
        },
        {
            "location": "/version_control/fetch_branches/#fetch",
            "text": "",
            "title": "Fetch"
        },
        {
            "location": "/version_control/fetch_branches/#how-to-fetch-down-branches-created-remotely",
            "text": "In order to update git to know about any  remotely created branches via Github  a  fetch  is performed.    To perform a fetch via IntelliJ, go to  VCS  ->  Git  ->  Fetch     After you have fetched the new branches you can locally checkout the branch to work within that branch",
            "title": "How to fetch down branches created remotely"
        },
        {
            "location": "/version_control/checkout/",
            "text": "How to checkout branches\n\n\nWhen multiple branches exist in a repository in order to work within a certain branch your local working trees files and index needs to be switched to that branch. This is accomplished by doing a \ncheckout\n.\n\n\nMost of the time before you do a checkout you will want to makes sure you have a clean working directory. You can do this by either committing changes to the current branch before doing the checkout or \nstash/shelve the changes\n.\n\n\nThere are two kinds of checkouts:\n\n\n\n\nCheckout a remote branch as a new local branch\n\n\nSwitching between local branches via a checkout\n\n\n\n\nCheckout a remote branch as a new local branch\n\n\nWhen you \ncreate a remote branch via Github\n and \nfetch\n it down to your local repository you need you now need to check it out as a local branch in order to work within that branch.\n\n\n\n\n\n\nIn IntelliJ go to \nVCS\n -> \nGit\n -> \nBranches...\n\n\n\n\n\n\n\n\nIn the Git Branches submenu under \nRemote Branches\n click on the branch you want which will show a submenu for the branch and click on \nCheckout as new local branch\n\n\n\n\n\n\n\n\nGive a name to the checkout of the remote branch or leave the already populated name.\n\n\n\n\n\n\n\n\nGit will take the remote branch and create a local branch and checkout your working tree to point to this new branch you can verify this in the bottom right hand corner.\n\n\n\n\n\n\n\n\nSwitch between local branches\n\n\nWhen you have more than one local branch in order to work on changes contained within that branch you need to switch you working tree to that branch by performing a \ngit checkout \nbranch_name\n \n command. In IntelliJ its as simple as the following:\n\n\n\n\n\n\nGo to \nVCS\n -> \nGit\n -> \nBranches...\n\n\n\n\n\n\n\n\nIn the Git Branches submenu under \nLocal Branches\n click on the branch you want to switch to and in the context menu click on \nCheckout",
            "title": "Checkout Branch"
        },
        {
            "location": "/version_control/checkout/#how-to-checkout-branches",
            "text": "When multiple branches exist in a repository in order to work within a certain branch your local working trees files and index needs to be switched to that branch. This is accomplished by doing a  checkout .  Most of the time before you do a checkout you will want to makes sure you have a clean working directory. You can do this by either committing changes to the current branch before doing the checkout or  stash/shelve the changes .  There are two kinds of checkouts:   Checkout a remote branch as a new local branch  Switching between local branches via a checkout",
            "title": "How to checkout branches"
        },
        {
            "location": "/version_control/checkout/#checkout-a-remote-branch-as-a-new-local-branch",
            "text": "When you  create a remote branch via Github  and  fetch  it down to your local repository you need you now need to check it out as a local branch in order to work within that branch.    In IntelliJ go to  VCS  ->  Git  ->  Branches...     In the Git Branches submenu under  Remote Branches  click on the branch you want which will show a submenu for the branch and click on  Checkout as new local branch     Give a name to the checkout of the remote branch or leave the already populated name.     Git will take the remote branch and create a local branch and checkout your working tree to point to this new branch you can verify this in the bottom right hand corner.",
            "title": "Checkout a remote branch as a new local branch"
        },
        {
            "location": "/version_control/checkout/#switch-between-local-branches",
            "text": "When you have more than one local branch in order to work on changes contained within that branch you need to switch you working tree to that branch by performing a  git checkout  branch_name    command. In IntelliJ its as simple as the following:    Go to  VCS  ->  Git  ->  Branches...     In the Git Branches submenu under  Local Branches  click on the branch you want to switch to and in the context menu click on  Checkout",
            "title": "Switch between local branches"
        },
        {
            "location": "/version_control/stashing/",
            "text": "Stashing/Shelving Changes\n\n\nA commit saves your changes permanently in the repository. However in your day to day work there are a lot of scenarios in which you only want to save your local changes temporarily.\n\n\nFor example, say your in the middle of changes related to a feature when an severe bug is reported. You obviously don't want to include your feature related changes along with the bugfix you're going to make. You want to get rid of those changes temporarily, make the bug fix, and then continue them later.\n\n\nThis kind of scenario happens all the time, you have local changes in your working copy that you can't commit at the moment and you want or need to start working on something else. So a way to get your working directory clean is to do a \nStash\n or \nShelve\n of the changes.\n\n\nThere is not a major difference between \nstash\n and \nshelve\n, functionally \nshelving\n is the term used within an IDE like IntelliJ which operates almost exactly like git \nstashing\n\n\nTo shelve changes in IntelliJ see their \ndocumentation",
            "title": "Stash/Shelve changes"
        },
        {
            "location": "/version_control/stashing/#stashingshelving-changes",
            "text": "A commit saves your changes permanently in the repository. However in your day to day work there are a lot of scenarios in which you only want to save your local changes temporarily.  For example, say your in the middle of changes related to a feature when an severe bug is reported. You obviously don't want to include your feature related changes along with the bugfix you're going to make. You want to get rid of those changes temporarily, make the bug fix, and then continue them later.  This kind of scenario happens all the time, you have local changes in your working copy that you can't commit at the moment and you want or need to start working on something else. So a way to get your working directory clean is to do a  Stash  or  Shelve  of the changes.  There is not a major difference between  stash  and  shelve , functionally  shelving  is the term used within an IDE like IntelliJ which operates almost exactly like git  stashing  To shelve changes in IntelliJ see their  documentation",
            "title": "Stashing/Shelving Changes"
        },
        {
            "location": "/workflow-strategy/",
            "text": "Workflow Strategies\n\n\nWith version control systems like Git it is important to understand how these source code control systems can be used to set a development model for the team or for a project. The two most popular development models using git are Git Flow and GitHub Flow. This page doesn't go into the detail specifics of each model as that is better served and explained in detail on the perspective sites.\n\n\nGit Flow\n\n\nGitHub Flow\n\n\nIn summary the major difference is that a set of code that has different \"releases\" of the code deployed and supported at the same time or has multiple teams working on different parts at the same time usually benefits from the Git Flow model. While GitHub flow is a light weight version that is suited for code that is deployed on a Continuous Delivery schedule where the code contained in the master branch is always deployable.\n\n\nCheck this \ngood overall summary\n of the differences between the two flows.",
            "title": "Worflows"
        },
        {
            "location": "/workflow-strategy/#workflow-strategies",
            "text": "With version control systems like Git it is important to understand how these source code control systems can be used to set a development model for the team or for a project. The two most popular development models using git are Git Flow and GitHub Flow. This page doesn't go into the detail specifics of each model as that is better served and explained in detail on the perspective sites.  Git Flow  GitHub Flow  In summary the major difference is that a set of code that has different \"releases\" of the code deployed and supported at the same time or has multiple teams working on different parts at the same time usually benefits from the Git Flow model. While GitHub flow is a light weight version that is suited for code that is deployed on a Continuous Delivery schedule where the code contained in the master branch is always deployable.  Check this  good overall summary  of the differences between the two flows.",
            "title": "Workflow Strategies"
        },
        {
            "location": "/auto-summit/",
            "text": "Analytics and Automation Summit #3\n\n\nDuring this summit we are going to have a session topic on Git and Github explaining what they are, the role they can play in software engineering, and why they are different. The structure of this session will include some hands on training and interactions with Git and Github.\n\n\nIn preparation for this session so that you can follow along, we recommend accomplishing the following before the session:\n\n\n\n\nRequest access to the U.S. Cellular Engineering Organization\n\n\nInstall Git and IntelliJ Community Edition onto a system in a way that you have administrative privileges. This is vital so that IntelliJ and Git has the authority to make hard drive changes as needed. \n\n\nGenerate and add an ssh key pair\n to your Github profile.\n\n\n\n\nIf you can't accomplish these tasks before the summit, don't worry. A lot of the material being covered is contained on this site for you to reference later.",
            "title": "Automation Summit"
        },
        {
            "location": "/auto-summit/#analytics-and-automation-summit-3",
            "text": "During this summit we are going to have a session topic on Git and Github explaining what they are, the role they can play in software engineering, and why they are different. The structure of this session will include some hands on training and interactions with Git and Github.  In preparation for this session so that you can follow along, we recommend accomplishing the following before the session:   Request access to the U.S. Cellular Engineering Organization  Install Git and IntelliJ Community Edition onto a system in a way that you have administrative privileges. This is vital so that IntelliJ and Git has the authority to make hard drive changes as needed.   Generate and add an ssh key pair  to your Github profile.   If you can't accomplish these tasks before the summit, don't worry. A lot of the material being covered is contained on this site for you to reference later.",
            "title": "Analytics and Automation Summit #3"
        }
    ]
}